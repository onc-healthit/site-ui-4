import * as React from 'react'
import { Box, Card, CardContent, Typography, Divider, ListItemText, ListItem, List, CardHeader } from '@mui/material'
interface QAItem {
  question: string
  answer: string
}

interface FAQCCDAProps {
  header: string
  items: QAItem[]
}

const CCDA: React.FC<FAQCCDAProps> = ({ header, items }) => {
  return (
    <Card
      sx={{
        width: '100%',
        borderRadius: '8px',
      }}
    >
      <CardHeader titleTypographyProps={{ fontWeight: 700 }} title={header} />
      <Divider />
      <CardContent>
        <List disablePadding>
          {items.map((item, index) => (
            <React.Fragment key={index}>
              <ListItem alignItems="flex-start" sx={{ pb: 1, px: 0 }}>
                <ListItemText>
                  <Box display={'flex'} gap={1} flexDirection={'row'}>
                    <Typography fontWeight={'600'} variant="h6" gutterBottom>
                      Q:
                    </Typography>
                    <Typography fontWeight={'600'} variant="h6" gutterBottom>
                      <span dangerouslySetInnerHTML={{ __html: item.question }} />
                    </Typography>
                  </Box>
                  <Box display={'flex'} gap={1} flexDirection={'row'}>
                    <Typography variant="body2" gutterBottom>
                      A:
                    </Typography>
                    <Typography variant="body2">
                      <span dangerouslySetInnerHTML={{ __html: item.answer }} />
                    </Typography>
                  </Box>
                </ListItemText>
              </ListItem>
            </React.Fragment>
          ))}
        </List>
      </CardContent>
    </Card>
  )
}

const FAQCCDA: React.FC = () => {
  const ccda: QAItem[] = [
    {
      question: 'How do you use the C-CDA 2.1 Validator?',
      answer: `1. Using the C-CDA Validator 2.1, Step 1 is to select whether you are performing a Sender specific test or Receiver Specific test (Select Sender / Receiver). a. The above choice will make what appears when you click the “Select Document “ to change based on the SUT role. b. In your case you would select “Sender”. Then you would select the criteria first and for each criteria that you select you may have one or more PDF files.
        You would download the PDF file,
        Enter the test data provided into your SUT instance.
        Generate a C-CDA document. (This is C-CDA Validator Step 2)
        Then in the C-CDA Validator Step 3, you have to select the Criteria and the PDF file which you used to generate the C-CDA.
        Then upload the C-CDA file that you generated in C-CDA Validator Step 4 and then validate.
        The above sequence is what you would use to validate the C-CDA files you generated using the test data.
        If you want to validate files generated by your system without using the test data provided then you can proceed to Step 3 and select “CCDAIGOnly” or “CCDAIGPlus_Vocab” options and then upload and validate. This is to help vendors prepare their systems however certification procedures require the use of the provided test data unless you work with the ATLs to file for deviations to the test data.`,
    },
    {
      question:
        'Can multiple organizations be included as information recipients within the <information Recipient> element?',
      answer:
        'CDA allows for 0..* information Recipients. You should include more than one informationRecipient if you’d like to send information to multiple organizations.',
    },
    {
      question:
        'How can CCDA xml files for interoperability modules be created to include multiple races and ethnicities?',
      answer: `There is an extension package that may be used. sdtc:raceCode sdtc:ethnicGroupCode See the <a href="http://www.hl7.org/implement/standards/productbrief.cfm?productid=447">C-CDA companion guide for additional details</a>.`,
    },
    {
      question: `I'm now trying to increase the debugging output from the validator, hopefully to see where my issues exist with the vocabulary. I've tried using a global DEBUG level in the logging.properties file and setting to ALL, but it appears that the validator doesn't look at the properties file to set it's level of logging.`,
      answer: `The logging that I do get appears to show the vocab/valuesystems loading just too quickly.
        08:27:14,748 INFO [VocabularyLoadRunner:92] Loading vocabularies at: /var/tomcat2/ValidatorConfig/CodeSystems... 08:27:14,748 INFO [VocabularyLoadRunner:94] Vocabularies loaded... 08:27:14,748 INFO [VocabularyLoadRunner:99] Loading value sets at: /var/tomcat2/ValidatorConfig/ValueSets... 08:27:14,749 INFO [VocabularyLoadRunner:101] Value Sets loaded... 08:27:14,749 INFO [VocabularyLoadRunner:105] !!!!* VOCABULARY DATABASE HAS FINISHED LOADING - SERVER WILL CONTINUE AND SHOULD BE DONE SHORTLY. *!!!!
        * A: 15:02:46,635 INFO  [VocabularyLoadRunner:92] Loading vocabularies at: C:\CCDA\Validator\code_repository...15:02:46,636 INFO [VocabularyLoadRunner:44] Loading files in : CDT... 15:02:47,758 INFO [VocabularyLoadRunner:44] Loading files in : ICD10CM... 15:02:51,412 INFO [VocabularyLoadRunner:44] Loading files in : ICD10PCS... 15:02:53,378 INFO [VocabularyLoadRunner:44] Loading files in : ICD9CMDX... .... C:\CCDA\Validator\valuesetrepository... 15:04:37,554 INFO [VocabularyLoadRunner:44] Loading files in : VSAC... 15:04:37,555 INFO [VsacLoader:30] Loading Value Set File: Ability.xlsx 15:04:37,662 INFO [VsacLoader:30] Loading Value Set File: ActPriority.xlsx 15:04:37,708 INFO [VsacLoader:30] Loading Value Set File: ActStatus.xlsx ...
        Here are my config settings for the the codes set and value set files:
        <Parameter name="vocabulary.localCodeRepositoryDir" value=C:\CCDA\Validator\coderepository override="true"/> <Parameter name="vocabulary.localValueSetRepositoryDir" value="C:\CCDA\Validator\valuesetrepository" override="true"/>
        The localCodeRepositoryDir is the path to the folders (e.g. ICD9CMDX, ICD9CMSG, ICD10CM, etc...) that contain the code set files. The localValueSetRepositoryDir is the path to the VSAC folder that contains all of the value set files. I believe the application is hard-coded to look for those particular folders in order to process the files within. That may be case-sensitive.`,
    },
    {
      question:
        'Hoping to obtain some clarity around representing NDC codes for administered immunizations in the C-CDA?',
      answer: `NDC (National Drug Code) is established as a standard for immunizations within the Consolidated Clinical Document Architecture (CCDA). The Office of the National Coordinator for Health Information Technology (ONC) Companion Guide to the CCDA states that NDC is supported as a translational element alongside the CVX (Vaccine Administered) code in the Clinical Document Architecture (CDA) Release 2.1.

        In the CDA R2.1 Implementation Guide (IG), NDC is referenced within the Immunization Medication Information entry-level template. The Vaccine Clinical Drug value set specifies that it is intentionally defined from RXNORM, comprising codes whose ingredients map to NDC codes associated with CVX codes by the Centers for Disease Control and Prevention (CDC). However, there is ambiguity regarding whether NDC codes or RXNORM codes should be used as translational elements for mapping between NDC and CVX codes.
        
        NDC codes are not explicitly included in the certification test data/validation for immunizations; only CVX codes are present. Therefore, finding examples of NDC usage for immunizations in C-CDA documents is challenging. The specific expectation for representing NDC codes in C-CDA documents to meet the ONC's CCDS standard remains unclear.
        
        In response, it is noted that the test data includes CVX codes because they are accompanied by a mandatory requirement in the C-CDA IG. Since the conformance statement for translation elements is "MAY" rather than "SHALL," the decision to use NDC codes mapped to CVX codes in the translation element, as specified by the ONC's CCDS Companion Guide (CCG), is at the discretion of the implementer.`,
    },
  ]

  return <CCDA header="Consolidated Clinical Document Architecture (C-CDA) FAQs" items={ccda} />
}

export default FAQCCDA
